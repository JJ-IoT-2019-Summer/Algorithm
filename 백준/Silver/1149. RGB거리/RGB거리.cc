#include<iostream>
#include <algorithm>

using namespace std;

/*
RGB거리에 사는 사람들은 집을 빨강, 초록, 파랑중에 하나로 칠하려고 한다. 
또한, 그들은 모든 이웃은 같은 색으로 칠할 수 없다는 규칙도 정했다.
집 i의 이웃은 집 i-1과 집 i+1이고, 첫 집과 마지막 집은 이웃이 아니다.
각 집을 빨강으로 칠할 때 드는 비용, 초록으로 칠할 때 드는 비용,
파랑으로 드는 비용이 주어질 때, 모든 집을 칠하는 비용의 최솟값을 구하는 프로그램을 작성하시오.
첫째 줄에 집의 수 N이 주어진다. N은 1,000보다 작거나 같다.
둘째 줄부터 N개의 줄에 각 집을 빨강으로,
초록으로, 파랑으로 칠하는 비용이 주어진다. 
비용은 1,000보다 작거나 같은 자연수이다.

*/
int DP[1001][3];

int cost[1001][3] = { 0, };

int main() {
	

	int N;
	int R, G, B;

	cin >> N;
	for (int z = 1; z < N + 1;z++) {	// 비용 입력 
		cin >> cost[z][0] >> cost[z][1] >> cost[z][2];
	}

	for (int j = 1; j < N + 1; j++) {
		DP[j][0] = min(DP[j - 1][1], DP[j - 1][2]) + cost[j][0]; 
		//전에 초록 또는 파랑으로 칠한 비용의 최솟값 + 지금 칠하는 빨강 비용
		DP[j][1] = min(DP[j - 1][0], DP[j - 1][2]) + cost[j][1]; 
		//전에 빨강 또는 파랑으로 칠한 비용의 최솟값 + 지금 칠하는 초록 비용
		DP[j][2] = min(DP[j - 1][0], DP[j - 1][1]) + cost[j][2]; // 파랑
		//전에 초록 또는 초록으로 칠한 비용의 최솟값 + 지금 칠하는 파랑 비용
		
	
	}
	cout << min(DP[N][0], min(DP[N][1], DP[N][2])) << endl;
	return 0;

}