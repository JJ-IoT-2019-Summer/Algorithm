#include <iostream>
#include <queue>

#include <cstring>
using namespace std;

int n, m; // n ?? ????, m ?? ????

struct Run {
	int x, y;
};

int arr[25][25];
bool visit[25][25];
int time[25][25];

int Dx[] = {0,0,-1,1}; //x ???
int Dy[] = {-1,1,0,0}; //y ???

Run point;
int cnt = 0;
queue<pair<int, int>> q;

int factorial(int num) {
	if (num <= 1) return 1;
	return num * factorial(num - 1);

}

int  solve() {
	if (n < 0 || n > 24 || m < 0 || m > 24)  // ???? ???? ???? ??? 
		return -1;
	if (0 < point.x && point.x > n && 0 < point.y && point.y > m)  // ??????? ?? ?????? ???? ???
		return -1;

	memset(arr, 0, sizeof(arr));
	memset(visit, false, sizeof(visit));
	memset(time, 0, sizeof(time));

	arr[point.y][point.x] = 1; // ??????? ??? ????? 1

	pair<int, int> curr;

	q.push(make_pair(0, 0)); // ???????? ??? y,x  ???
	visit[0][0] = true; // ???? ???? ????? ?μά

	int new_x = 0; 
	int new_y = 0;

	while (!q.empty()) {
		curr = q.front(); //???? ??? 
		q.pop();

		for (int i = 0; i < 4; i++) {
			new_y = curr.first + Dy[i]; // ???? ????₯κ??? 4 ???? ???
			new_x = curr.second + Dx[i];

			if (0 <= new_x && new_x < n && 0 <= new_y && new_y < m) { // ?? ??? ??????
				if (arr[new_y][new_x] == 1) { // ??????? ??? ??????
					time[new_y][new_x] = time[curr.first][curr.second] + 1;  // ?????? ??????? ???? ?©£? ???
					return 1; // ????
					
				}
				else if (arr[new_y][new_x] == 0 && visit[new_y][new_x] == false) { // ?μά???? ???? ???????? ????? ????
					visit[new_y][new_x] = true; // ?μά ??????
					q.push(make_pair(new_y, new_x)); // ???? ??? ??? ????
					time[new_y][new_x] = time[curr.first][curr.second] + 1; //???? ??????? ??? ?©£? ??? 

				}
			}
		}

	}

}
int main() {
	cin >> n >> m; // n ?? ????, m ?? ????

	cin >> point.x >> point.y;   // ?????? ??? x, y
	
	int result = solve();
	if (result == -1) cout << "fail";  // ??????? ?? ?????? ?????? ??? fail

	else cout << time[point.y][point.x] << endl;		// ?????? ??? x,y ???? ?????? ?? ?? ??? ?©£? ?? ??? ?©£?
	
	cout << factorial(point.y + point.x) / (factorial(point.x) * factorial(point.y)) << endl;  //??? ????? ?? 

}